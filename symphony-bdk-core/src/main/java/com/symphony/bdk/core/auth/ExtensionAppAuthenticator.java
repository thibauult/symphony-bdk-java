package com.symphony.bdk.core.auth;

import com.symphony.bdk.core.auth.exception.AuthInitializationException;
import com.symphony.bdk.core.auth.exception.AuthUnauthorizedException;

import com.symphony.bdk.core.auth.jwt.UserClaim;
import com.symphony.bdk.gen.api.model.PodCertificate;

import org.apiguardian.api.API;

import javax.annotation.Nonnull;

/**
 * Extension App Authenticator Service.
 */
@API(status = API.Status.STABLE)
public interface ExtensionAppAuthenticator {

  /**
   * Authenticates an extension app.
   *
   * @param appToken The token generated by application backend.
   * @return the extension app authentication session.
   * @throws AuthUnauthorizedException when the bot is unauthorized.
   */
  @Nonnull
  AppAuthSession authenticateExtensionApp(String appToken) throws AuthUnauthorizedException;

  /**
   * Retrieves the pod certificate. Useful when validating JWT tokens.
   *
   * @return the pod certificate
   */
  PodCertificate getPodCertificate();

  /**
   * Validates if appToken and symphonyToken corresponds to an existing session
   *
   * @param appToken the appToken
   * @param symphonyToken the symphonyToken
   * @return true if symphonyToken associated to a previous session initiated with appToken
   */
  boolean validateTokens(String appToken, String symphonyToken);


  /**
   * Validates a JWT against the pod certificate
   *
   * @param jwt the JWT to be validated
   * @return the {@link UserClaim} containing all information in JWT claim "user" if JWT successfully validated
   * @throws AuthInitializationException if JWT cannot be validated or if JWT is invalid
   * @see <a href="https://docs.developers.symphony.com/building-extension-applications-on-symphony/app-authentication/circle-of-trust-authentication#verifying-decoding-and-using-the-jwt">Verifying, Decoding and Using the JWT</a>
   */
  UserClaim validateJwt(String jwt) throws AuthInitializationException;
}
